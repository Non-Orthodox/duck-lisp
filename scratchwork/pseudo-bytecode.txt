/*
Fibonacci sequence pulled from <https://www.programiz.com/c-programming/examples/fibonacci-series>.

int main() {

  int i, t1 = 0, t2 = 1, nextTerm = t1 + t2;

  // print the first two terms t1 and t2
  printf("Fibonacci Series: %d, %d, ", t1, t2);

  // print 3rd to nth terms
  for (i = 3; i <= 10; ++i) {
    printf("%d", nextTerm);
    printf(", ");
    t1 = t2;
    t2 = nextTerm;
    nextTerm = t1 + t2;
  }
  return 0;
}

(integer i)
(integer t1)
(set t1 0)
(integer t2)
(set t2 1)
(integer nextTerm)
(set nextTerm (+ t1 t2))
(print "Fibonacci Series: ")
(print t1)
(print ", ")
(print t2)
(print ", ")
(set i 3)
(while (<= i 10)
	(print nextTerm)
	(set t1 t2)
	(set t2 nextTerm)
	(set nextTerm (+ t1 t2))
	(set i (+ i 1))
)
(return 0)
*/


// First stage: Instruction tree
{
	instruction-class: push-integer-zero
	arguments: {}
	stack-label: i
}
{
	instruction-class: push-integer-zero
	arguments: {}
	stack-label: t1
}
{
	instruction-class: set-integer-immediate
	arguments: {
		#t1
		0
	}
}
{
	instruction-class: push-integer-zero
	arguments: {}
	stack-label: t2
}
{
	instruction-class: set-integer-immediate
	arguments: {
		#t2
		1
	}
}
{
	instruction-class: push-integer-zero
	arguments: {}
	stack-label: nextTerm
}
{
	instruction-class: set-integer-register
	arguments: {
		#nextTerm
		#__t0
	}
	prerequisites: {
		{
			instruction-class: push-integer-zero
			stack-label: __t0
		}
		{
			instruction-class: add-integer-register
			arguments: {
				#__t0
				#t1
				#t2
			}
		}
	}
}
{
	instruction-class: print-string-immediate
	arguments: {
		length("Fibonacci Series: ")
		"Fibonacci Series: "
	}
}
{
	instruction-class: print-integer-register
	arguments: {
		#t1
	}
}
{
	instruction-class: print-string-immediate
	arguments: {
		length(", ")
		", "
	}
}
{
	instruction-class: print-integer-register
	arguments: {
		#t2
	}
}
{
	instruction-class: print-string-immediate
	arguments: {
		length(", ")
		", "
	}
}
{
	instruction-class: set-integer-immediate
	arguments: {
		#i
		3
	}
}
{
	instruction-class: 
}